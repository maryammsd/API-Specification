graph [
  directed 1
  node [
    id 0
    label "android.accessibilityservice.AccessibilityServiceInfo"
    type "class"
    comment "&#10; * This class describes an {@link AccessibilityService}. The system notifies an&#10; * {@link AccessibilityService} for {@link android.view.accessibility.AccessibilityEvent}s&#10; * according to the information encapsulated in this class.&#10; *&#10; * <div class=&#34;special reference&#34;>&#10; * <h3>Developer Guides</h3>&#10; * <p>For more information about creating AccessibilityServices, read the&#10; * <a href=&#34;{@docRoot}guide/topics/ui/accessibility/index.html&#34;>Accessibility</a>&#10; * developer guide.</p>&#10; * </div>&#10; *&#10; * @attr ref android.R.styleable#AccessibilityService_accessibilityEventTypes&#10; * @attr ref android.R.styleable#AccessibilityService_accessibilityFeedbackType&#10; * @attr ref android.R.styleable#AccessibilityService_accessibilityFlags&#10; * @attr ref android.R.styleable#AccessibilityService_canRequestEnhancedWebAccessibility&#10; * @attr ref android.R.styleable#AccessibilityService_canRequestFilterKeyEvents&#10; * @attr ref android.R.styleable#AccessibilityService_canRequestTouchExplorationMode&#10; * @attr ref android.R.styleable#AccessibilityService_canRetrieveWindowContent&#10; * @attr ref android.R.styleable#AccessibilityService_description&#10; * @attr ref android.R.styleable#AccessibilityService_summary&#10; * @attr ref android.R.styleable#AccessibilityService_notificationTimeout&#10; * @attr ref android.R.styleable#AccessibilityService_packageNames&#10; * @attr ref android.R.styleable#AccessibilityService_settingsActivity&#10; * @attr ref android.R.styleable#AccessibilityService_nonInteractiveUiTimeout&#10; * @attr ref android.R.styleable#AccessibilityService_interactiveUiTimeout&#10; * @attr ref android.R.styleable#AccessibilityService_canTakeScreenshot&#10; * @see AccessibilityService&#10; * @see android.view.accessibility.AccessibilityEvent&#10; * @see android.view.accessibility.AccessibilityManager&#10; "
  ]
  node [
    id 1
    label "public String getId()"
    type "method"
    comment "&#10;     * The accessibility service id.&#10;     * <p>&#10;     *   <strong>Generated by the system.</strong>&#10;     * </p>&#10;     * @return The id.&#10;     "
  ]
  node [
    id 2
    label "public ResolveInfo getResolveInfo()"
    type "method"
    comment "&#10;     * The service {@link ResolveInfo}.&#10;     * <p>&#10;     *   <strong>Generated by the system.</strong>&#10;     * </p>&#10;     * @return The info.&#10;     "
  ]
  node [
    id 3
    label "android.content.pm.ResolveInfo"
    type "class"
    comment "&#10; * Information that is returned from resolving an intent&#10; * against an IntentFilter. This partially corresponds to&#10; * information collected from the AndroidManifest.xml's&#10; * &#38;lt;intent&#38;gt; tags.&#10; "
  ]
  node [
    id 4
    label "public CharSequence loadLabel(PackageManager pm)"
    type "method"
    comment "&#10;     * Retrieve the current textual label associated with this resolution.  This&#10;     * will call back on the given PackageManager to load the label from&#10;     * the application.&#10;     *&#10;     * @param pm A PackageManager from which the label can be loaded; usually&#10;     * the PackageManager from which you originally retrieved this item.&#10;     *&#10;     * @return Returns a CharSequence containing the resolutions's label.  If the&#10;     * item does not have a label, its name is returned.&#10;     "
  ]
  node [
    id 5
    label "public Drawable loadIcon(PackageManager pm)"
    type "method"
    comment "&#10;     * Retrieve the current graphical icon associated with this resolution.  This&#10;     * will call back on the given PackageManager to load the icon from&#10;     * the application.&#10;     *&#10;     * @param pm A PackageManager from which the icon can be loaded; usually&#10;     * the PackageManager from which you originally retrieved this item.&#10;     *&#10;     * @return Returns a Drawable containing the resolution's icon.  If the&#10;     * item does not have an icon, the default activity icon is returned.&#10;     "
  ]
  node [
    id 6
    label " final int getIconResourceInternal()"
    type "method"
    comment "&#10;     * Return the icon resource identifier to use for this match.  If the&#10;     * match defines an icon, that is used; else if the activity defines&#10;     * an icon, that is used; else, the application icon is used.&#10;     * This function does not check noResourceId flag.&#10;     *&#10;     * @return The icon associated with this match.&#10;     "
  ]
  node [
    id 7
    label "public final int getIconResource()"
    type "method"
    comment "&#10;     * Return the icon resource identifier to use for this match.  If the&#10;     * match defines an icon, that is used; else if the activity defines&#10;     * an icon, that is used; else, the application icon is used.&#10;     *&#10;     * @return The icon associated with this match.&#10;     "
  ]
  node [
    id 8
    label "public boolean isCrossProfileIntentForwarderActivity()"
    type "method"
    comment "&#10;     * Returns whether this resolution represents the intent forwarder activity.&#10;     *&#10;     * @return whether this resolution represents the intent forwarder activity&#10;     "
  ]
  node [
    id 9
    label "public String getSettingsActivityName()"
    type "method"
    comment "&#10;     * The settings activity name.&#10;     * <p>&#10;     *    <strong>Statically set from&#10;     *    {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong>&#10;     * </p>&#10;     * @return The settings activity name.&#10;     "
  ]
  node [
    id 10
    label "SERVICE_META_DATA"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 11
    label "public int getCapabilities()"
    type "method"
    comment "&#10;     * Returns the bit mask of capabilities this accessibility service has such as&#10;     * being able to retrieve the active window content, etc.&#10;     *&#10;     * @return The capability bit mask.&#10;     *&#10;     * @see #CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT&#10;     * @see #CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION&#10;     * @see #CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS&#10;     * @see #CAPABILITY_CAN_CONTROL_MAGNIFICATION&#10;     * @see #CAPABILITY_CAN_PERFORM_GESTURES&#10;     * @see #CAPABILITY_CAN_TAKE_SCREENSHOT&#10;     "
  ]
  node [
    id 12
    label "public CharSequence loadSummary(PackageManager packageManager)"
    type "method"
    comment "&#10;     * The localized summary of the accessibility service.&#10;     * <p>&#10;     *    <strong>Statically set from&#10;     *    {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong>&#10;     * </p>&#10;     * @return The localized summary if available, and {@code null} if a summary&#10;     * has not been provided.&#10;     "
  ]
  node [
    id 13
    label "public String loadDescription(PackageManager packageManager)"
    type "method"
    comment "&#10;     * The localized description of the accessibility service.&#10;     * <p>&#10;     *    <strong>Statically set from&#10;     *    {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong>&#10;     * </p>&#10;     * @return The localized description.&#10;     "
  ]
  node [
    id 14
    label "public void setNonInteractiveUiTimeoutMillis(@IntRange(from = 0) int timeout)"
    type "method"
    comment "&#10;     * Set the recommended time that non-interactive controls need to remain on the screen to&#10;     * support the user.&#10;     * <p>&#10;     *     <strong>This value can be dynamically set at runtime by&#10;     *     {@link AccessibilityService#setServiceInfo(AccessibilityServiceInfo)}.</strong>&#10;     * </p>&#10;     *&#10;     * @param timeout The timeout in milliseconds.&#10;     *&#10;     * @see android.R.styleable#AccessibilityService_nonInteractiveUiTimeout&#10;     "
  ]
  node [
    id 15
    label "setServiceInfo(AccessibilityServiceInfo)"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 16
    label "public int getNonInteractiveUiTimeoutMillis()"
    type "method"
    comment "&#10;     * Get the recommended timeout for non-interactive controls.&#10;     *&#10;     * @return The timeout in milliseconds.&#10;     *&#10;     * @see #setNonInteractiveUiTimeoutMillis(int)&#10;     "
  ]
  node [
    id 17
    label "public void setInteractiveUiTimeoutMillis(@IntRange(from = 0) int timeout)"
    type "method"
    comment "&#10;     * Set the recommended time that interactive controls need to remain on the screen to&#10;     * support the user.&#10;     * <p>&#10;     *     <strong>This value can be dynamically set at runtime by&#10;     *     {@link AccessibilityService#setServiceInfo(AccessibilityServiceInfo)}.</strong>&#10;     * </p>&#10;     *&#10;     * @param timeout The timeout in milliseconds.&#10;     *&#10;     * @see android.R.styleable#AccessibilityService_interactiveUiTimeout&#10;     "
  ]
  node [
    id 18
    label "public int getInteractiveUiTimeoutMillis()"
    type "method"
    comment "&#10;     * Get the recommended timeout for interactive controls.&#10;     *&#10;     * @return The timeout in milliseconds.&#10;     *&#10;     * @see #setInteractiveUiTimeoutMillis(int)&#10;     "
  ]
  node [
    id 19
    label "public int describeContents()"
    type "method"
    comment "&#10;     * {@inheritDoc}&#10;     "
  ]
  node [
    id 20
    label "public static String feedbackTypeToString(int feedbackType)"
    type "method"
    comment "&#10;     * Returns the string representation of a feedback type. For example,&#10;     * {@link #FEEDBACK_SPOKEN} is represented by the string FEEDBACK_SPOKEN.&#10;     *&#10;     * @param feedbackType The feedback type.&#10;     * @return The string representation.&#10;     "
  ]
  node [
    id 21
    label "FEEDBACK_SPOKEN"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 22
    label "public static String flagToString(int flag)"
    type "method"
    comment "&#10;     * Returns the string representation of a flag. For example,&#10;     * {@link #DEFAULT} is represented by the string DEFAULT.&#10;     *&#10;     * @param flag The flag.&#10;     * @return The string representation.&#10;     "
  ]
  node [
    id 23
    label "DEFAULT"
    type "link-shadow"
    comment "No comment available"
  ]
  node [
    id 24
    label "public static String capabilityToString(int capability)"
    type "method"
    comment "&#10;     * Returns the string representation of a capability. For example,&#10;     * {@link #CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT} is represented&#10;     * by the string CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT.&#10;     *&#10;     * @param capability The capability.&#10;     * @return The string representation.&#10;     "
  ]
  node [
    id 25
    label "CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT"
    type "link-shadow"
    comment "No comment available"
  ]
  edge [
    source 0
    target 1
    type "child"
  ]
  edge [
    source 0
    target 2
    type "child"
  ]
  edge [
    source 0
    target 9
    type "child"
  ]
  edge [
    source 0
    target 11
    type "child"
  ]
  edge [
    source 0
    target 12
    type "child"
  ]
  edge [
    source 0
    target 13
    type "child"
  ]
  edge [
    source 0
    target 14
    type "child"
  ]
  edge [
    source 0
    target 16
    type "child"
  ]
  edge [
    source 0
    target 17
    type "child"
  ]
  edge [
    source 0
    target 18
    type "child"
  ]
  edge [
    source 0
    target 19
    type "child"
  ]
  edge [
    source 0
    target 20
    type "child"
  ]
  edge [
    source 0
    target 22
    type "child"
  ]
  edge [
    source 0
    target 24
    type "child"
  ]
  edge [
    source 2
    target 3
    type "link"
  ]
  edge [
    source 3
    target 4
    type "child"
  ]
  edge [
    source 3
    target 5
    type "child"
  ]
  edge [
    source 3
    target 6
    type "child"
  ]
  edge [
    source 3
    target 7
    type "child"
  ]
  edge [
    source 3
    target 8
    type "child"
  ]
  edge [
    source 9
    target 10
    type "link"
  ]
  edge [
    source 12
    target 10
    type "link"
  ]
  edge [
    source 13
    target 10
    type "link"
  ]
  edge [
    source 14
    target 15
    type "link"
  ]
  edge [
    source 17
    target 15
    type "link"
  ]
  edge [
    source 20
    target 21
    type "link"
  ]
  edge [
    source 22
    target 23
    type "link"
  ]
  edge [
    source 24
    target 25
    type "link"
  ]
]
